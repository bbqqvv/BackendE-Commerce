package org.bbqqvv.backendecommerce.entity;

import jakarta.persistence.*;
import lombok.*;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder(toBuilder = true)
@Entity
@Table(name = "discounts")
public class Discount {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(unique = true, nullable = false)
    private String code; // M√£ gi·∫£m gi√°

    @Column(nullable = false)
    private BigDecimal discountAmount; // S·ªë ti·ªÅn ho·∫∑c % gi·∫£m gi√°

    @Column
    private BigDecimal maxDiscountAmount; // Gi·ªõi h·∫°n t·ªëi ƒëa cho gi·∫£m gi√° %

    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private DiscountType discountType; // Lo·∫°i gi·∫£m gi√° (C·ªê ƒê·ªäNH ho·∫∑c %)

    @Column(nullable = false)
    private BigDecimal minOrderValue; // Gi√° tr·ªã ƒë∆°n h√†ng t·ªëi thi·ªÉu ƒë·ªÉ √°p d·ª•ng

    @Column(nullable = false)
    private Integer usageLimit; // S·ªë l·∫ßn s·ª≠ d·ª•ng t·ªëi ƒëa

    @Column(nullable = false)
    private Integer timesUsed = 0; // S·ªë l·∫ßn ƒë√£ s·ª≠ d·ª•ng

    @Column(nullable = false)
    private LocalDateTime startDate; // Ng√†y b·∫Øt ƒë·∫ßu √°p d·ª•ng

    @Column(nullable = false)
    private LocalDateTime expiryDate; // Ng√†y h·∫øt h·∫°n

    @Column(nullable = false)
    private boolean active = true; // Tr·∫°ng th√°i ho·∫°t ƒë·ªông c·ªßa m√£ gi·∫£m gi√°

    @OneToMany(mappedBy = "discount", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<DiscountProduct> applicableProducts = new ArrayList<>();

    @OneToMany(mappedBy = "discount", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<DiscountUser> applicableUsers = new ArrayList<>();


    @CreationTimestamp
    @Column(updatable = false)
    private LocalDateTime createdAt;

    @UpdateTimestamp
    private LocalDateTime updatedAt;

    // üîπ Ki·ªÉm tra xem m√£ gi·∫£m gi√° c√≥ c√≤n hi·ªáu l·ª±c kh√¥ng
    public boolean isExpired() {
        return LocalDateTime.now().isAfter(expiryDate);
    }

    // üîπ Ki·ªÉm tra xem m√£ gi·∫£m gi√° ƒë√£ ƒë·∫°t gi·ªõi h·∫°n s·ª≠ d·ª•ng ch∆∞a
    public boolean isUsageLimitReached() {
        return timesUsed >= usageLimit;
    }

    // üîπ Ki·ªÉm tra xem m√£ gi·∫£m gi√° c√≥ th·ªÉ √°p d·ª•ng cho ng∆∞·ªùi d√πng kh√¥ng
    public boolean isApplicableForUser(User user) {
        return applicableUsers == null || applicableUsers.stream()
                .anyMatch(discountUser -> discountUser.getUser().getId().equals(user.getId()));
    }


}
